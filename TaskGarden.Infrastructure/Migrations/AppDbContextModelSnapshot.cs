// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskGarden.Infrastructure;

#nullable disable

namespace TaskGarden.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6175d8ab-5dd1-40b2-b226-be0d541b0e7b",
                            Email = "demo1@demo.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO1@DEMO.COM",
                            NormalizedUserName = "DEMO1@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAKtiECaueqYdQ++bgQSy5qeGjclvBL6lge+Zb/Rq2aoiG6iPVYYFVYTkxMwBRSxQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a55f72c4-5370-460f-846f-38215a2cffcf",
                            TwoFactorEnabled = false,
                            UserName = "demo1@demo.com"
                        },
                        new
                        {
                            Id = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "662385aa-29ac-41dc-acde-b87e092ddcf4",
                            Email = "demo2@demo.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO2@DEMO.COM",
                            NormalizedUserName = "DEMO2@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENDw7meyJSwJ5N/sp9yj4rRQDUXBWNs0N/4C64rE1uoxsDOO7YiVrcah1jC0e3MMpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8628106e-23c5-4979-a314-7303cbc7defb",
                            TwoFactorEnabled = false,
                            UserName = "demo2@demo.com"
                        },
                        new
                        {
                            Id = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7a198a4-ea0a-45eb-8bfe-b1c9a6b39e74",
                            Email = "demo3@demo.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            LastName = "Three",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO3@DEMO.COM",
                            NormalizedUserName = "DEMO3@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKiWeAL/6B0HFtEMK/yhUPIGAOOkIaoQPmbEsd3RHdsX3RXQkYVckNbN1sqYWyfzsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d0c0beb-24d7-480d-9b5a-a0405f6c4c52",
                            TwoFactorEnabled = false,
                            UserName = "demo3@demo.com"
                        });
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "lime",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2982),
                            Name = "Groceries",
                            Tag = "shopping-cart",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2988),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 2,
                            Color = "red",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2995),
                            Name = "Bills",
                            Tag = "banknote",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2995),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 3,
                            Color = "blue",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2996),
                            Name = "Entertainment",
                            Tag = "roller-coaster",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2997),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 4,
                            Color = "yellow",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2998),
                            Name = "Travel",
                            Tag = "plane",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(2998),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 5,
                            Color = "grape",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3001),
                            Name = "School",
                            Tag = "university",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3001),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 6,
                            Color = "cyan",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3003),
                            Name = "Groceries",
                            Tag = "shopping-cart",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3004),
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259"
                        },
                        new
                        {
                            Id = 7,
                            Color = "orange",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3005),
                            Name = "Bills",
                            Tag = "receipt",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3005),
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259"
                        },
                        new
                        {
                            Id = 8,
                            Color = "indigo",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3006),
                            Name = "Groceries",
                            Tag = "shopping-basket",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3007),
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00"
                        },
                        new
                        {
                            Id = 9,
                            Color = "teal",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3008),
                            Name = "Bills",
                            Tag = "hand-coins",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3008),
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00"
                        },
                        new
                        {
                            Id = 10,
                            Color = "pink",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3009),
                            Name = "Entertainment",
                            Tag = "theater",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3009),
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00"
                        });
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitedUserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InviterUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskListId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InviterUserId");

                    b.HasIndex("TaskListId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("TaskLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3260),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "This week's shopping list for ShopRite",
                            IsCompleted = false,
                            Name = "ShopRite shopping list",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3260)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3265),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "This week's shopping list for Walmart",
                            IsCompleted = false,
                            Name = "Walmart shopping list",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3265)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3267),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "Monthly rent payment reminders",
                            IsCompleted = false,
                            Name = "Rent payment",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3267)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3268),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "Electricity bill payment reminders",
                            IsCompleted = false,
                            Name = "Electricity Bill",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3268)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3270),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "List of movies to watch this weekend",
                            IsCompleted = false,
                            Name = "Movie night",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3270)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3271),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "Track upcoming concerts and events",
                            IsCompleted = false,
                            Name = "Concert Tickets",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3271)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3272),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "Plan and book flights and hotels",
                            IsCompleted = false,
                            Name = "Vacation Planning",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3273)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3274),
                            CreatedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            Description = "Track deadlines for assignments",
                            IsCompleted = false,
                            Name = "Assignment Deadlines",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3274)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3275),
                            CreatedById = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            Description = "Weekly shopping list for Giant",
                            IsCompleted = false,
                            Name = "Giant shopping list",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3275)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3277),
                            CreatedById = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            Description = "Track Internet bill payments",
                            IsCompleted = false,
                            Name = "Internet Bill",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3277)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3278),
                            CreatedById = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            Description = "Grocery list for SuperMart",
                            IsCompleted = false,
                            Name = "SuperMart shopping list",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3278)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3279),
                            CreatedById = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            Description = "List of items for the local market",
                            IsCompleted = false,
                            Name = "Local Market shopping list",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3279)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3280),
                            CreatedById = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            Description = "Keep track of monthly mobile bills",
                            IsCompleted = false,
                            Name = "Mobile Bill",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3281)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3282),
                            CreatedById = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            Description = "List of fun things to do this weekend",
                            IsCompleted = false,
                            Name = "Weekend Fun Activities",
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3282)
                        });
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompletedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("TaskListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompletedById");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskListItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3812),
                            Description = "Buy apples",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 1,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3813)
                        },
                        new
                        {
                            Id = 2,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3814),
                            Description = "Buy bananas",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 1,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3814)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3815),
                            Description = "Buy oranges",
                            IsCompleted = false,
                            Position = 3,
                            TaskListId = 1,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3816)
                        },
                        new
                        {
                            Id = 4,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3817),
                            Description = "Buy milk",
                            IsCompleted = true,
                            Position = 4,
                            TaskListId = 1,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3817)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3818),
                            Description = "Buy eggs",
                            IsCompleted = false,
                            Position = 5,
                            TaskListId = 1,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3818)
                        },
                        new
                        {
                            Id = 6,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3819),
                            Description = "Buy toothpaste",
                            IsCompleted = true,
                            Position = 1,
                            TaskListId = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3819)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3820),
                            Description = "Buy toothbrush",
                            IsCompleted = false,
                            Position = 2,
                            TaskListId = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3820)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3821),
                            Description = "Buy shampoo",
                            IsCompleted = false,
                            Position = 3,
                            TaskListId = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3821)
                        },
                        new
                        {
                            Id = 9,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3822),
                            Description = "Buy conditioner",
                            IsCompleted = true,
                            Position = 4,
                            TaskListId = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3822)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3823),
                            Description = "Buy soap",
                            IsCompleted = false,
                            Position = 5,
                            TaskListId = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3823)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3824),
                            Description = "Pay rent",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 3,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3824)
                        },
                        new
                        {
                            Id = 12,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3825),
                            Description = "Confirm payment",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 3,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3825)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3826),
                            Description = "Pay electricity bill",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 4,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3826)
                        },
                        new
                        {
                            Id = 14,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3827),
                            Description = "Check bill amount",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 4,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3827)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3828),
                            Description = "Buy popcorn",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 5,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3828)
                        },
                        new
                        {
                            Id = 16,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3829),
                            Description = "Pick movie",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 5,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3829)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3830),
                            Description = "Prepare snacks",
                            IsCompleted = false,
                            Position = 3,
                            TaskListId = 5,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3831)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3831),
                            Description = "Buy concert tickets",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 6,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3832)
                        },
                        new
                        {
                            Id = 19,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3832),
                            Description = "Confirm concert date",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 6,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3833)
                        },
                        new
                        {
                            Id = 20,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3833),
                            Description = "Book flights",
                            IsCompleted = true,
                            Position = 1,
                            TaskListId = 7,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3834)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3835),
                            Description = "Reserve hotel",
                            IsCompleted = false,
                            Position = 2,
                            TaskListId = 7,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3835)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3836),
                            Description = "Plan itinerary",
                            IsCompleted = false,
                            Position = 3,
                            TaskListId = 7,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3836)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3837),
                            Description = "Submit math assignment",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 8,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3837)
                        },
                        new
                        {
                            Id = 24,
                            CompletedById = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3838),
                            Description = "Submit history assignment",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 8,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3838)
                        },
                        new
                        {
                            Id = 25,
                            CompletedById = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3839),
                            Description = "Buy bread",
                            IsCompleted = true,
                            Position = 1,
                            TaskListId = 9,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3839)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3840),
                            Description = "Buy butter",
                            IsCompleted = false,
                            Position = 2,
                            TaskListId = 9,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3840)
                        },
                        new
                        {
                            Id = 27,
                            CompletedById = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3841),
                            Description = "Pay internet bill",
                            IsCompleted = true,
                            Position = 1,
                            TaskListId = 10,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3841)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3842),
                            Description = "Buy sugar",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 11,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3842)
                        },
                        new
                        {
                            Id = 29,
                            CompletedById = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3843),
                            Description = "Buy rice",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 11,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3843)
                        },
                        new
                        {
                            Id = 30,
                            CompletedById = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3844),
                            Description = "Buy tomatoes",
                            IsCompleted = true,
                            Position = 1,
                            TaskListId = 12,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3844)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3845),
                            Description = "Pay mobile bill",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 13,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3845)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3846),
                            Description = "Plan weekend trip",
                            IsCompleted = false,
                            Position = 1,
                            TaskListId = 14,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3846)
                        },
                        new
                        {
                            Id = 33,
                            CompletedById = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3847),
                            Description = "Book tickets",
                            IsCompleted = true,
                            Position = 2,
                            TaskListId = 14,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3847)
                        });
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListMember", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("TaskListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TaskListId");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskListMembers");

                    b.HasData(
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3596),
                            Id = 1,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3596)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3604),
                            Id = 2,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3604)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3605),
                            Id = 3,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3605)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3606),
                            Id = 4,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3606)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3607),
                            Id = 5,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3607)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 6,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3608),
                            Id = 6,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3608)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3609),
                            Id = 7,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3609)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3610),
                            Id = 8,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3610)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 9,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3611),
                            Id = 9,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3611)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 10,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3612),
                            Id = 10,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3612)
                        },
                        new
                        {
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            TaskListId = 11,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3613),
                            Id = 11,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3613)
                        },
                        new
                        {
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            TaskListId = 12,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3614),
                            Id = 12,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3614)
                        },
                        new
                        {
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            TaskListId = 13,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3615),
                            Id = 13,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3615)
                        },
                        new
                        {
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            TaskListId = 14,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3616),
                            Id = 14,
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3616)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3616),
                            Id = 15,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3617)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3617),
                            Id = 16,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3618)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3618),
                            Id = 17,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3619)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3619),
                            Id = 18,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3619)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3620),
                            Id = 19,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3620)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 6,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3621),
                            Id = 20,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3621)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3622),
                            Id = 21,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3622)
                        },
                        new
                        {
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            TaskListId = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3623),
                            Id = 22,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3623)
                        },
                        new
                        {
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            TaskListId = 9,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3624),
                            Id = 23,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3624)
                        },
                        new
                        {
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            TaskListId = 10,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3625),
                            Id = 24,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3625)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 11,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3626),
                            Id = 25,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3626)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 12,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3626),
                            Id = 26,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3627)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 13,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3627),
                            Id = 27,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3628)
                        },
                        new
                        {
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            TaskListId = 14,
                            CreatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3628),
                            Id = 28,
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 3, 15, 2, 39, 25, 111, DateTimeKind.Utc).AddTicks(3628)
                        });
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.UserTaskListCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaskListId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTaskListCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Category", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Invitation", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "InviterUser")
                        .WithMany()
                        .HasForeignKey("InviterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.TaskList", "TaskList")
                        .WithMany()
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InviterUser");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Session", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskList", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.Category", "Category")
                        .WithMany("TaskLists")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListItem", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById");

                    b.HasOne("TaskGarden.Domain.Entities.TaskList", "TaskList")
                        .WithMany("TaskListItems")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedBy");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListMember", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.TaskList", "TaskList")
                        .WithMany("TaskListAssignments")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "User")
                        .WithMany("TaskListMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.UserTaskListCategory", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.TaskList", "TaskList")
                        .WithMany()
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TaskList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("TaskListMembers");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Category", b =>
                {
                    b.Navigation("TaskLists");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskList", b =>
                {
                    b.Navigation("TaskListAssignments");

                    b.Navigation("TaskListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
