// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskGarden.Infrastructure;

#nullable disable

namespace TaskGarden.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1b503418-dc0f-4187-93c0-2e30070b2835",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb4513ac-62e1-42f2-bf48-88fb5a529e87",
                            Email = "demo1@demo.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO1@DEMO.COM",
                            NormalizedUserName = "DEMO1@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELacx8W8QJFAgeJ3lj5Y9Lm2VihytD8ir3huA1WHUQDX5Aqbdib+emf7CIY388LyFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34d230d5-50e1-4981-9cb1-7db652db0f7c",
                            TwoFactorEnabled = false,
                            UserName = "demo1@demo.com"
                        },
                        new
                        {
                            Id = "9e22a16c-da04-4232-b479-95c3a7b89259",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a26279da-f7e6-40fa-9888-05b922f9e804",
                            Email = "demo2@demo.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO2@DEMO.COM",
                            NormalizedUserName = "DEMO2@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZua3HmUalWosg1j92knDCsuTRE6dJHDyHiPLxw6KI1BEQkUvOwKpAjdS1Y8uFm0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "678deaca-059a-427e-907f-aae7bba45531",
                            TwoFactorEnabled = false,
                            UserName = "demo2@demo.com"
                        },
                        new
                        {
                            Id = "40fcec36-7eef-42d8-8086-cd2226b88d00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1928c4e-aed0-4ad9-bffe-c75b78e787a6",
                            Email = "demo3@demo.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            LastName = "Three",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO3@DEMO.COM",
                            NormalizedUserName = "DEMO3@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED/R/K+61pWPrvvPMofiEwp1QF+GfMcVI3DFgKHUup4rkEqdo0tkuyGskEEhUpNVFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0141bbe-fc74-438a-bccf-ebb8df3aa442",
                            TwoFactorEnabled = false,
                            UserName = "demo3@demo.com"
                        });
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "lime",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2193),
                            Name = "Groceries",
                            Tag = "shopping-cart",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2197),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 2,
                            Color = "red",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2203),
                            Name = "Bills",
                            Tag = "banknote",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2203),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 3,
                            Color = "blue",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2205),
                            Name = "Entertainment",
                            Tag = "roller-coaster",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2205),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 4,
                            Color = "yellow",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2206),
                            Name = "Travel",
                            Tag = "plane",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2207),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 5,
                            Color = "grape",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2208),
                            Name = "School",
                            Tag = "university",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2209),
                            UserId = "1b503418-dc0f-4187-93c0-2e30070b2835"
                        },
                        new
                        {
                            Id = 6,
                            Color = "cyan",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2210),
                            Name = "Groceries",
                            Tag = "shopping-cart",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2210),
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259"
                        },
                        new
                        {
                            Id = 7,
                            Color = "orange",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2211),
                            Name = "Bills",
                            Tag = "receipt",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2211),
                            UserId = "9e22a16c-da04-4232-b479-95c3a7b89259"
                        },
                        new
                        {
                            Id = 8,
                            Color = "indigo",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2212),
                            Name = "Groceries",
                            Tag = "shopping-basket",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2213),
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00"
                        },
                        new
                        {
                            Id = 9,
                            Color = "teal",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2213),
                            Name = "Bills",
                            Tag = "hand-coins",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2214),
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00"
                        },
                        new
                        {
                            Id = 10,
                            Color = "pink",
                            CreatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2215),
                            Name = "Entertainment",
                            Tag = "theater",
                            UpdatedAt = new DateTime(2025, 3, 13, 20, 44, 19, 114, DateTimeKind.Utc).AddTicks(2215),
                            UserId = "40fcec36-7eef-42d8-8086-cd2226b88d00"
                        });
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitedUserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InviterUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskListId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InviterUserId");

                    b.HasIndex("TaskListId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("TaskLists");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompletedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("TaskListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompletedById");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskListItems");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListMember", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("TaskListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TaskListId");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskListMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Category", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Invitation", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "InviterUser")
                        .WithMany()
                        .HasForeignKey("InviterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.TaskList", "TaskList")
                        .WithMany()
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InviterUser");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Session", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskList", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.Category", "Category")
                        .WithMany("TaskLists")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListItem", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById");

                    b.HasOne("TaskGarden.Domain.Entities.TaskList", "TaskList")
                        .WithMany("TaskListItems")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedBy");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskListMember", b =>
                {
                    b.HasOne("TaskGarden.Domain.Entities.TaskList", "TaskList")
                        .WithMany("TaskListAssignments")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskGarden.Domain.Entities.AppUser", "User")
                        .WithMany("TaskListMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("TaskListMembers");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.Category", b =>
                {
                    b.Navigation("TaskLists");
                });

            modelBuilder.Entity("TaskGarden.Domain.Entities.TaskList", b =>
                {
                    b.Navigation("TaskListAssignments");

                    b.Navigation("TaskListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
